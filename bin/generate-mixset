#!/usr/bin/env python3

# Generate a set of stems using Stable Audio 2.0, an ethically sourced dataset.

# Requires a stability.ai API key

import argparse
import os
import requests
import json
from typing import Optional

def generate_audio(
    prompt: str = "",
    duration: int = 180,
    steps: int = 30,
    output_format: str = "wav",
    seed: Optional[int] = None,
    cfg_scale: Optional[float] = None,
    output_path: Optional[str] = None,
) -> None:
    try:
        with open(".stability") as f:
            api_key = f.read().strip()
    except FileNotFoundError:
        raise ValueError("Please create a .stability file containing your API key")

    if not api_key:
        raise ValueError("The .stability file is empty")

    data = {
        "prompt": prompt,
        "output_format": output_format,
        "duration": duration,
        "steps": steps,
    }

    if seed is not None:
        data["seed"] = seed

    if cfg_scale is not None:
        data["cfg_scale"] = cfg_scale

    response = requests.post(
        "https://api.stability.ai/v2beta/audio/stable-audio-2/text-to-audio",
        headers={
            "authorization": f"Bearer {api_key}",
            "accept": "audio/*"
        },
        files={"none": ""},
        data=data,
    )

    if response.status_code == 200:
        filename = output_path or f"track.{output_format}"
        with open(filename, "wb") as file:
            file.write(response.content)
        print(f"Saved audio to {filename}")
    else:
        raise Exception(response.json())

def main() -> None:
    parser = argparse.ArgumentParser("Generate audio with StableAudio 2.0")

    parser.add_argument(
        "--prompt",
        type=str,
        default="",
    )

    parser.add_argument(
        "--duration",
        type=int,
        default=180,
    )

    parser.add_argument(
        "--steps",
        type=int,
        default=60,
        help="Sampling steps"
    )

    parser.add_argument(
        "--output-format",
        dest="output_format",
        type=str,
        default="mp3",
        help="Output format"
    )

    parser.add_argument(
        "--seed",
        type=int,
        help="Random seed"
    )

    parser.add_argument(
        "--cfg-scale",
        dest="cfg_scale",
        type=float,
        help="CFG scale"
    )

    parser.add_argument(
        "--count",
        dest="count",
        type=int,
        default=1,
        help="Number of songs to generate"
    )

    parser.add_argument(
        "--output-dir",
        dest="output_dir",
        type=str,
        default=".",
        help="Directory to save generated audio"
    )

    args = parser.parse_args()

    os.makedirs(args.output_dir, exist_ok=True)

    # write metadata file
    metadata = {
        "prompt": args.prompt,
        "duration": args.duration,
        "steps": args.steps,
        "output_format": args.output_format,
        "seed": args.seed,
        "cfg_scale": args.cfg_scale,
        "count": args.count,
        "output_dir": args.output_dir,
    }
    meta_path = os.path.join(args.output_dir, "metadata.json")
    with open(meta_path, "w") as meta_file:
        json.dump(metadata, meta_file, indent=4)
    print(f"Saved metadata to {meta_path}")

    for i in range(1, args.count + 1):
        fname = f"track_{i}.{args.output_format}"
        out_path = os.path.join(args.output_dir, fname)

        generate_audio(
            prompt=args.prompt,
            duration=args.duration,
            steps=args.steps,
            output_format=args.output_format,
            seed=args.seed,
            cfg_scale=args.cfg_scale,
            output_path=out_path,
        )

if __name__ == "__main__":
    main()

